{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","endGame","trim","split","filter","word","length","calculateWordCount","useEffect","setTimeout","value","onChange","event","target","disabled","ref","onClick","current","focus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NA0DeA,MAtDf,WACE,IAEA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,mBAHpB,IAGtB,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACMC,EAAaC,iBAAO,MAqB1B,SAASC,IACPL,GAAiB,GACjBE,EAjBF,SAA4BP,GAC1B,IAAsB,IAAlBI,EAEF,OADiBJ,EAAKW,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAcjCC,CAAmBhB,IAahC,OAVFiB,qBAAU,WACJb,GAAiBF,EAAgB,EACnCgB,YAAW,WACTf,EAAiBD,EAAgB,KAChC,KACwB,IAAlBA,GACTQ,MAED,CAACR,EAAeE,IAGb,gCACI,8CACA,0BAAUe,MAAOnB,EAAMoB,SArCjC,SAAsBC,GACpBpB,EAAQoB,EAAMC,OAAOH,QAoCkCI,UAAWnB,EAAeoB,IAAKhB,IAC9E,kDAAqBN,KACrB,wBAAQuB,QA5BlB,WACEtB,EApBoB,IAqBpBE,GAAiB,GACjBJ,EAAQ,IACRO,EAAWkB,QAAQH,UAAW,EAC9Bf,EAAWkB,QAAQC,SAuBkBJ,SAAUnB,EAAvC,mBACA,8CAAiBE,SCzCdsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ddb72cae.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\nimport './App.css';\n\n\nfunction App() {\n  const STARTING_TIME = 10;\n\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const textBoxRef = useRef(null);\n\n  function handleChange(event) {\n    setText(event.target.value);\n  }\n\n  function calculateWordCount(text) {\n    if (isTimeRunning === false) {\n      const wordsArr = text.trim().split(\" \")\n      return wordsArr.filter(word => word !== \"\").length\n    }\n  }\n\n  function startClock() {\n    setTimeRemaining(STARTING_TIME);\n    setIsTimeRunning(true);\n    setText(\"\");\n    textBoxRef.current.disabled = false;\n    textBoxRef.current.focus();\n  }\n\n  function endGame() {\n    setIsTimeRunning(false);\n    setWordCount(calculateWordCount(text))\n  }\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining(timeRemaining - 1)\n      }, 1000)\n    } else if (timeRemaining === 0) {\n      endGame()\n    }\n  }, [timeRemaining, isTimeRunning])\n\n    return (\n        <div>\n            <h1>Speed typing</h1>\n            <textarea value={text} onChange={handleChange} disabled={!isTimeRunning} ref={textBoxRef}></textarea>\n            <h4>Time remaining: {timeRemaining}</h4>\n            <button onClick={startClock} disabled={isTimeRunning}>Start</button>\n            <h4>Word count: {wordCount}</h4>\n        </div>   \n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}